set package.cpath = package.cpath ++ ';/usr/lib64/libiuplua54.so'
require <- "iuplua"

require("iuplua")

val iup_button = iup.button
set iup.button = func (...) {
    val h = iup_button(...)
    set h.action = iup_action
    return(h)
}

func iup_value (...) {
    emit(:value, ...)
}

val iup_text = iup.text
set iup.text = func (...) {
    val h = iup_text(...)
    set h.valuechanged_cb = iup_value
    return(h)
}

func attrib2number(value) {
  if !value || (value=="") {
    return (0)
  } else {
    return (tonumber(value))
  }
}

func fahrenheit2celcius(temp) {
  return ((temp - 32) * (5./9.))
}

func celcius2fahrenheit(temp) {
  return ((temp * (9./5.)) + 32)
}

;;********************************** Main *****************************************

val txt_celcius = iup.text  <- [size = "60", mask = "[+/-]?(/d+/.?/d*|/./d+)"]
val lbl_celcius = iup.label <- [title = "Celcius = "]

val txt_fahrenheit = iup.text <- [size = "60", mask = "[+/-]?(/d+/.?/d*|/./d+)"]
val lbl_fahrenheit = iup.label <- [title = "Fahrenheit"]

val dlg = iup.dialog <- [iup.hbox <- [txt_celcius, lbl_celcius, txt_fahrenheit, lbl_fahrenheit, ngap = "10", alignment = "ACENTER"], title = "TempConv", margin = "10x10"]

dlg.showxy(dlg, iup.CENTER, iup.CENTER )

spawn {
        every :value , it==txt_celcius {
            set txt_fahrenheit.value = celcius2fahrenheit(attrib2number(txt_celcius.value))
        }
}
spawn {
        every :value , it==txt_fahrenheit {
            set txt_celcius.value = fahrenheit2celcius(attrib2number(txt_fahrenheit.value))
        }
}

if (iup.MainLoopLevel()==0) {
  iup.MainLoop()
}
