require "atmos.env.iup"
require("iuplua")

func attrib2number(value) {
  if !value || (value=="") {
    0
  } else {
    tonumber(value)
  }
}

func fahrenheit2celcius(temp) {
  (temp - 32) * (5./9.)
}

func celcius2fahrenheit(temp) {
  (temp * (9./5.)) + 32
}

;;********************************** Main *****************************************

val txt_celcius = iup.text @{size = "60", mask = "[+/-]?(/d+/.?/d*|/./d+)"}
val lbl_celcius = iup.label @{title = "Celcius = "}

val txt_fahrenheit = iup.text @{size = "60", mask = "[+/-]?(/d+/.?/d*|/./d+)"}
val lbl_fahrenheit = iup.label @{title = "Fahrenheit"}

val dlg = iup.dialog @{iup.hbox @{txt_celcius, lbl_celcius, txt_fahrenheit, lbl_fahrenheit, ngap = "10", alignment = "ACENTER"}, title = "TempConv", margin = "10x10"}

dlg::showxy( iup.CENTER, iup.CENTER )

par {
    every txt_celcius, 'value' {
        set txt_fahrenheit.value = celcius2fahrenheit(attrib2number(txt_celcius.value))
    }
} with {
    every txt_fahrenheit, 'value' {
        set txt_celcius.value = fahrenheit2celcius(attrib2number(txt_fahrenheit.value))
    }
}
