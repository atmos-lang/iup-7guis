require "atmos.env.iup"
require("iuplua")

func checkDateFormat(str_date) {
	set str_date = string.gsub(str_date, "^%s*(.-)%s*$", "%1")
	val check = string.find(str_date, "^%d?%d.%d?%d.%d%d%d%d$")
	if !check {
		return <- nil
	}
	val day, month, year = string['match'](str_date, "(%d?%d).(%d?%d).(%d%d%d%d)")
	if (day==nil) || (month==nil) || (year==nil) {
		return(nil)
	}
	return (1, tonumber(day), tonumber(month), tonumber(year))
}

func validateDate(day, month, year) {
	var leapYear = 0

	if (day && (day < 1)) || (day>31) || (month && (month < 1)) || (month > 12) {
		return <- nil
	}

	if ((year % 400) == 0) || (((year % 4) == 0) && ((year % 100) != 0)) {
		set leapYear = 1
	}

	if (month == 2) && leapYear && (day > 29) {
		return <- nil
	}

	if (month == 2) && (!leapYear) && (day > 28) {
		return <- nil
	}

	if ((month == 4) || (month == 6) || (month == 9) || (month == 11)) && (day > 30) {
		return <- nil
	}

  return <- 1
}

func startBeforeEnd(startDay, startMonth, startYear, endDay, endMonth, endYear) {

  if startYear < endYear {
    return <- 1
  }

  if  (startYear == endYear) && (startMonth < endMonth) {
    return <- 1
  }

  if  (startYear == endYear) && (startMonth == endMonth) && (startDay <= endDay) {
    return <- 1
  }

  return <- nil
}

func checkDate(self) {
	val check, day, month, year = checkDateFormat(self.value)
	if !check {
		set self.valid = nil
		return()
	}
	
	val valid = validateDate(day, month, year)
	if !valid {
		set self.valid = nil
		return()
	}

	set self.valid = 1
	set self.day = day
	set self.month = month
	set self.year = year
}

;;********************************** Main *****************************************

val lst_flight = iup.list @{"one-way flight", "return flight", dropdown = "YES", value = 1, expand = "HORIZONTAL"}
val txt_startDate = iup.text @{expand = "HORIZONTAL", value = "22.09.1957"}
val txt_returnDate = iup.text @{expand = "HORIZONTAL", active="NO", value = "22.09.1957"}
val btn_book = iup.button @{title = "Book", expand = "HORIZONTAL"}

val dlg = iup.dialog @{iup.vbox @{lst_flight, txt_startDate, txt_returnDate, btn_book, gap="10"}, title = "Book Flight", size = "150", margin = "10x10"}

dlg::showxy( iup.CENTER, iup.CENTER )

func One_Ok () {
    set btn_book.active = 'YES'
    set txt_returnDate.active = 'NO'
    set txt_startDate.bgcolor = "255 255 255"
    val Next = par_or {
        await(txt_startDate, 'value')
        checkDate(txt_startDate)
        if txt_startDate.valid {
            One_Ok
        } else {
            One_No
        }
    } with {
        await(lst_flight, 'value')
        Two
    } with {
        await(btn_book, 'action')
        iup.Message (
            "Attention!",
            "You have booked a one-way flight on " ++ txt_startDate.value ++ "."
        )
        One_Ok
    }
    Next()
}

func One_No () {
    set btn_book.active = 'NO'
    set txt_returnDate.active = 'NO'
    set txt_startDate.bgcolor = "255 0 0"
    val Next = par_or {
        await(txt_startDate, 'value')
        checkDate(txt_startDate)
        if txt_startDate.valid {
            One_Ok
        } else {
            One_No
        }
    } with {
        await(lst_flight, 'value')
        Two_No
    }
    Next()
}

func Two () {
    checkDate(txt_startDate)
    checkDate(txt_returnDate)
    if txt_startDate.valid && txt_returnDate.valid &&
        startBeforeEnd(txt_startDate.day, txt_startDate.month, txt_startDate.year, txt_returnDate.day, txt_returnDate.month, txt_returnDate.year)
    {
        Two_Ok()
    } else {
        Two_No()
    }
}

func Two_Ok () {
    set btn_book.active = 'YES'
    set txt_returnDate.active = 'YES'
    set txt_startDate.bgcolor = "255 255 255"
    set txt_returnDate.bgcolor = "255 255 255"
    val Next = par_or {
        await(_or_(@{txt_startDate,'value'}, @{txt_returnDate,'value'}))
        Two
    } with {
        await(lst_flight, 'value')
        One_Ok
    } with {
        await(btn_book, 'action')
        iup.Message (
            "Attention!",
            "You have booked a return flight on " ++ txt_startDate.value ++ " and " ++ txt_returnDate.value ++ "."
        )
        Two_Ok
    }
    Next()
}

func Two_No () {
    set btn_book.active = 'NO'
    set txt_returnDate.active = 'YES'
    set txt_startDate.bgcolor = (txt_startDate.valid && "255 255 255") || "255 0 0"
    set txt_returnDate.bgcolor = (txt_returnDate.valid && "255 255 255") || "255 0 0"
    val Next = par_or {
        await(_or_(@{txt_startDate,'value'}, @{txt_returnDate,'value'}))
        Two
    } with {
        await(lst_flight, 'value')
        Two_No
    }
    Next()
}

await One_Ok()
