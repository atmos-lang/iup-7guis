val env_sok = require "atmos.env.socket"
val env_iup = require "atmos.env.iup"
require("iuplua")

var counter = 0

func addCount () {
	set counter = counter + 1
}

func getCount () {
	counter
}

;;********************************** Main *****************************************

val txt_count = iup.text @{value = getCount(), readonly = "YES",  size = "60"}
val btn_count = iup.button @{title = "Count", size = "60"}

val dlg = iup.dialog @{iup.hbox @{txt_count, btn_count, ngap = "10"}, title = "Counter", margin = "10x10"}

dlg::showxy( iup.CENTER, iup.CENTER )

set env_iup.env.idle = \{
    env_sok.step @{ clock=false, ms=0 }
}
;;;
iup.SetIdle <- \{
    env_sok.step @{ clock=false, ms=0 }
}
;;;

val socket = require "socket"
val s = env_sok

val cli = assert(s.xtcp())
assert(s.xconnect(cli, "localhost", 22222))

loop {
    await(btn_count,'action')
    set btn_count.active = "NO"

    cli::send "?"
    val v = s.xrecv(cli)
    assert((v=='0') || (v=='1'))

    set btn_count.active = "YES"
    if v == '1' {
        addCount()
        set txt_count.value = getCount()
    }
}
